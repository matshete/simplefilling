<?phprequire_once "connection.php";class ModelEmpobjit12{	/*=============================================	CREATE CUSTOMERS	=============================================*/	static public function mdlAddEmpobjit12($table, $data){		$stmt = Connection::connect()->prepare("INSERT INTO $table(	REGISTRATION_NUMBER, ENTERPRISE_NAME, YEAR_FILED, NEXT_PERIOD) VALUES (:regnumber, :name, :fileddate, :nextdue)");		$stmt->bindParam(":name", $data["name"], PDO::PARAM_STR);		$stmt->bindParam(":fileddate", $data["fileddate"], PDO::PARAM_STR);				$stmt->bindParam(":nextdue", $data["nextdue"], PDO::PARAM_STR);		$stmt->bindParam(":regnumber", $data["regnumber"], PDO::PARAM_STR);						if($stmt->execute()){			return "ok";		}else{			return "error";				}		$stmt->close();		$stmt = null;	}	/*=============================================	SHOW CUSTOMERS	=============================================*/	static public function mdlShowEmpobjit12($table, $item, $value){		if($item != null){			$stmt = Connection::connect()->prepare("SELECT * FROM $table WHERE $item = :$item");			$stmt -> bindParam(":".$item, $value, PDO::PARAM_STR);			$stmt -> execute();			//print_r($stmt);			return $stmt -> fetch();		}else{			$stmt = Connection::connect()->prepare("SELECT * FROM $table");			$stmt -> execute();			return $stmt -> fetchAll();		}		$stmt -> close();					$stmt = null;	}	/*=============================================	EDIT ANNUALS	=============================================*/	static public function mdlEditEmpobjit12($table, $data){										 		$stmt = Connection::connect()->prepare("UPDATE $table SET REGISTRATION_NUMBER = :regnumber, ENTERPRISE_NAME = :name, YEAR_FILED = :fileddate, NEXT_PERIOD = :nextdue WHERE REGISTRATION_NUMBER = :id");		$stmt->bindParam(":id", $data["regnumber"], PDO::PARAM_STR);				$stmt->bindParam(":name", $data["name"], PDO::PARAM_STR);		$stmt->bindParam(":fileddate", $data["fileddate"], PDO::PARAM_STR);		$stmt->bindParam(":nextdue", $data["nextdue"], PDO::PARAM_STR);		$stmt->bindParam(":regnumber", $data["regnumber"], PDO::PARAM_STR);				if($stmt->execute()){					return "ok";		}else{						return "error";							}		$stmt->close();		$stmt = null;	}	/*=============================================	DELETE CUSTOMER	=============================================*/	static public function mdlDeleteEmpobjit12($table, $data){		$stmt = Connection::connect()->prepare("DELETE FROM $table WHERE REGISTRATION_NUMBER = :id");		$stmt -> bindParam(":id", $data, PDO::PARAM_STR);				if($stmt -> execute()){						return "ok";					}else{			return "error";			}		$stmt -> close();		$stmt = null;	}	/*=============================================	UPDATE CUSTOMER	=============================================*/	static public function mdlUpdateEmpobjit12($table, $item1, $value1, $value){		$stmt = Connection::connect()->prepare("UPDATE $table SET $item1 = :$item1 WHERE id = :id");		$stmt -> bindParam(":".$item1, $value1, PDO::PARAM_STR);		$stmt -> bindParam(":id", $value, PDO::PARAM_STR);		if($stmt -> execute()){			return "ok";				}else{			return "error";			}		$stmt -> close();		$stmt = null;	}				/*=============================================	CHECK DATE AND SEND EMAIL REMINDER	=============================================*/	static public function mdlSendReminder($table, $item, $value){		if($item != null){			$stmt = Connection::connect()->prepare("SELECT * FROM $table WHERE $item = :$item");			$stmt -> bindParam(":".$item, $value, PDO::PARAM_STR);			$stmt -> execute();						return $stmt -> fetchAll();		}else{			$stmt = Connection::connect()->prepare("SELECT * FROM $table");			$stmt -> execute();			return $stmt -> fetchAll();		}		$stmt -> close();		$stmt = null;	}}